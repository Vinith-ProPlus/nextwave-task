{
	"info": {
		"_postman_id": "nextwave-task-api-collection",
		"name": "NextWave Task API",
		"description": "Complete API collection for NextWave Task Management System\n\nBase URL: http://localhost:8000/api\n\nFeatures:\n- JWT Authentication\n- User Management (CRUD)\n- Task Management (CRUD)\n- Role-based Access Control\n- Soft Deletes\n- Validation & Error Handling",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register User",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Vinith Kumar\",\n    \"email\": \"Vinith@example.com\",\n    \"password\": \"password123\",\n    \"password_confirmation\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"register"
							]
						},
						"description": "Register a new user account"
					},
					"response": []
				},
				{
					"name": "Login User",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"Vinith@example.com\",\n    \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"login"
							]
						},
						"description": "Login with email and password to get JWT token"
					},
					"response": []
				},
				{
					"name": "Get User Profile",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/me",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"me"
							]
						},
						"description": "Get current authenticated user profile"
					},
					"response": []
				},
				{
					"name": "Refresh Token",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/refresh",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"refresh"
							]
						},
						"description": "Refresh JWT token"
					},
					"response": []
				},
				{
					"name": "Logout",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"logout"
							]
						},
						"description": "Logout and invalidate JWT token"
					},
					"response": []
				}
			],
			"description": "Authentication endpoints for user registration, login, and token management"
		},
		{
			"name": "User Management",
			"item": [
				{
					"name": "Get All Users",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/users?search=&status=&start_date=&end_date=&sort_by=created_at&sort_order=desc&per_page=15",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "search",
									"value": "",
									"description": "Search in name and email"
								},
								{
									"key": "is_active",
									"value": "",
									"description": "Filter by active status (true/false)"
								},
								{
									"key": "start_date",
									"value": "",
									"description": "Filter by start date (YYYY-MM-DD)"
								},
								{
									"key": "end_date",
									"value": "",
									"description": "Filter by end date (YYYY-MM-DD)"
								},
								{
									"key": "sort_by",
									"value": "created_at",
									"description": "Sort by field (created_at, updated_at, name, email)"
								},
								{
									"key": "sort_order",
									"value": "desc",
									"description": "Sort order (asc, desc)"
								},
								{
									"key": "per_page",
									"value": "15",
									"description": "Items per page (1-100)"
								}
							]
						},
						"description": "Get all users with filtering, sorting, and pagination"
					},
					"response": []
				},
				{
					"name": "Create User",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Vinith Admin\",\n    \"email\": \"Vinith@example.com\",\n    \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						},
						"description": "Create a new user (Admin only)"
					},
					"response": []
				},
				{
					"name": "Get User by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/users/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{user_id}}"
							]
						},
						"description": "Get specific user by ID"
					},
					"response": []
				},
				{
					"name": "Update User",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Vinith Updated Kumar\",\n    \"email\": \"Vinith.updated@example.com\",\n}"
						},
						"url": {
							"raw": "{{base_url}}/users/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{user_id}}"
							]
						},
						"description": "Update user information"
					},
					"response": []
				},
				{
					"name": "Delete User",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/users/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{user_id}}"
							]
						},
						"description": "Soft delete user (Admin only)"
					},
					"response": []
				},
				{
					"name": "Get User Tasks",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/users/{{user_id}}/tasks",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{user_id}}",
								"tasks"
							]
						},
						"description": "Get all tasks for a specific user"
					},
					"response": []
				}
			],
			"description": "User management endpoints for CRUD operations on users"
		},
		{
			"name": "Task Management",
			"item": [
				{
					"name": "Get All Tasks",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/tasks?search=&status=&priority=&start_date=&end_date=&sort_by=created_at&sort_order=desc&per_page=15",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks"
							],
							"query": [
								{
									"key": "search",
									"value": "",
									"description": "Search in title and description"
								},
								{
									"key": "status",
									"value": "",
									"description": "Filter by status (pending, in_progress, completed, cancelled)"
								},
								{
									"key": "priority",
									"value": "",
									"description": "Filter by priority (low, medium, high, urgent)"
								},
								{
									"key": "start_date",
									"value": "",
									"description": "Filter by start date (YYYY-MM-DD)"
								},
								{
									"key": "end_date",
									"value": "",
									"description": "Filter by end date (YYYY-MM-DD)"
								},
								{
									"key": "sort_by",
									"value": "created_at",
									"description": "Sort by field (created_at, updated_at, title, due_date, priority, status)"
								},
								{
									"key": "sort_order",
									"value": "desc",
									"description": "Sort order (asc, desc)"
								},
								{
									"key": "per_page",
									"value": "15",
									"description": "Items per page (1-100)"
								}
							]
						},
						"description": "Get all tasks for the authenticated user with filtering, sorting, and pagination"
					},
					"response": []
				},
				{
					"name": "Create Task",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Complete API Testing\",\n    \"description\": \"Test all API endpoints thoroughly\",\n    \"priority\": \"high\",\n    \"due_date\": \"2024-01-15\",\n    \"status\": \"pending\",\n    \"user_id\": \"1\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/tasks",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks"
							]
						},
						"description": "Create a new task"
					},
					"response": []
				},
				{
					"name": "Get Task by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/tasks/{{task_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks",
								"{{task_id}}"
							]
						},
						"description": "Get specific task by ID"
					},
					"response": []
				},
				{
					"name": "Update Task",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Updated Task Title\",\n    \"description\": \"Updated task description\",\n    \"priority\": \"medium\",\n    \"due_date\": \"2024-01-20\",\n    \"status\": \"in_progress\",\n    \"user_id\": \"1\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/tasks/{{task_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks",
								"{{task_id}}"
							]
						},
						"description": "Update task information"
					},
					"response": []
				},
				{
					"name": "Update Task Status",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"status\": \"completed\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/tasks/{{task_id}}/status",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks",
								"{{task_id}}",
								"status"
							]
						},
						"description": "Update only the task status"
					},
					"response": []
				},
				{
					"name": "Delete Task",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/tasks/{{task_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks",
								"{{task_id}}"
							]
						},
						"description": "Soft delete task"
					},
					"response": []
				}
			],
			"description": "Task management endpoints for CRUD operations on tasks"
		},
		{
			"name": "API Log Management",
			"item": [
				{
					"name": "Get All API Logs",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/logs?search=&method=&status_code=&start_date=&end_date=&sort_by=timestamp&sort_order=desc&per_page=15",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"logs"
							],
							"query": [
								{
									"key": "search",
									"value": "",
									"description": "Search in endpoint, method, user_agent, ip"
								},
								{
									"key": "method",
									"value": "",
									"description": "Filter by HTTP method (GET, POST, PUT, PATCH, DELETE)"
								},
								{
									"key": "status_code",
									"value": "",
									"description": "Filter by status code (100-599)"
								},
								{
									"key": "start_date",
									"value": "",
									"description": "Filter by start date (YYYY-MM-DD)"
								},
								{
									"key": "end_date",
									"value": "",
									"description": "Filter by end date (YYYY-MM-DD)"
								},
								{
									"key": "sort_by",
									"value": "timestamp",
									"description": "Sort by field (timestamp, method, endpoint, status_code, duration_ms)"
								},
								{
									"key": "sort_order",
									"value": "desc",
									"description": "Sort order (asc, desc)"
								},
								{
									"key": "per_page",
									"value": "15",
									"description": "Items per page (1-100)"
								}
							]
						},
						"description": "Get all API logs with filtering, sorting, and pagination"
					},
					"response": []
				},
				{
					"name": "Get API Log by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/logs/{{log_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"logs",
								"{{log_id}}"
							]
						},
						"description": "Get specific API log by ID"
					},
					"response": []
				},
				{
					"name": "Get API Logs Statistics",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/logs/statistics",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"logs",
								"statistics"
							]
						},
						"description": "Get API logs statistics and analytics"
					},
					"response": []
				}
			],
			"description": "API log management endpoints for monitoring and analytics"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000/api",
			"type": "string"
		},
		{
			"key": "jwt_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "user_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "task_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "log_id",
			"value": "",
			"type": "string"
		}
	]
}
